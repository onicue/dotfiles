#!/bin/bash

FLAG_COUNT=2

tmp=$1

hidden=""
type=""

update_file(){
  local pos=$1
  local new_char=$2

  if [ $pos -ge 1 ]; then
    echo -n "$new_char" | dd of="$tmp" bs=1 seek=$(($pos - 1)) count=1 conv=notrunc 2>/dev/null
  else
    echo "Error: Invalid position."
    return 1
  fi
}

get_file_flags(){
  echo "$(head -c $FLAG_COUNT $tmp)"
}

change_flags(){
  local file_flags=$(get_file_flags)
  local flag=$1

  first_char="${file_flags:0:1}"
  second_char="${file_flags:1:1}"

  case $flag in
    h)
      if [ "$first_char" = "1" ]; then
        update_file 1 "0"
      elif [ "$first_char" = "0" ]; then
        update_file 1 "1"
      else
        echo "Error: Hidden flag is not valid."
        return 1
      fi
      ;;
    f)
      if [ "$second_char" = "1" ]; then
        update_file 2 "0"
      elif [ "$second_char" = "0" ]; then
        update_file 2 "1"
      else
        echo "Error: Type flag is not valid."
        return 1
      fi
      ;;
    *)
      echo "Error: Invalid flag type."
      return 1
      ;;
  esac
}

set_flags(){
  local file_flags=$(get_file_flags)
  hidden="${file_flags:0:1}"
  type="${file_flags:1:1}"
}

get_find_command(){
  if [ "$hidden" = 1 ]; then
    if [ "$type" = 1 ]; then
      ls -a
    else
      if command -v rg > /dev/null 2>&1; then
        rg --hidden --files --glob "!.git"
      else
        find . -type f ! -path "*.git*" -print | cut -c3-
      fi
    fi
  else
    if [ "$type" = 1 ]; then
      ls
    else
      if command -v rg > /dev/null 2>&1; then
        rg --files --glob "!.git"
      else
        find . -type f ! -path "*.git*" ! -path "./.*" -print | cut -c3-
      fi
    fi
  fi
}

main(){
  local args="$1"

  if [ $args ]; then
    for (( i=0; i<${#args}; i++ )); do
      change_flags "${args:i:1}"
    done
  fi
  set_flags
  get_find_command
}

main $2
